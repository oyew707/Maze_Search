"""
-------------------------------------------------------
[program description]
-------------------------------------------------------
Author:  Einstein Oyewole
ID:      180517070
Email:   oyew70702mylaurier.ca
__updated__ = "2020-06-17"
-------------------------------------------------------
"""
# Imports
from tkinter.ttk import * 
from tkinter import * 
from assgn1 import for_gui 
# Constants


def read_maze(filename):
    """
    -------------------------------------------------------
    creates a 2d list of the maze in a textfile given
    Use: readmaze("file.txt")
    -------------------------------------------------------
    Parameters:
        filename - textfile of maze (str)
    Returns:
         maze - maze % - walls, P - starting point, . - endpoint (2Dlist)   
    ------------------------------------------------------
    """
    fp = open(filename, "r")
    maze = []
    for line in fp:
        maze.append(list(line.strip()))
    fp.close()
    return maze


def make_maze(frame, maze):
    """
    -------------------------------------------------------
    Reads a maze file, creates label for each point in the matrix
    Assigns black for wall, blue for Pac and Red for exit
    Stores all label in my_widgets
    Use: my_widgets = make_maze(frame,  maze)
    -------------------------------------------------------
    Parameters:
        frame - frame for showing the maze (Tkinter frame)
        maze - name of maze file (str)
    Returns:
        my_widgets - All labels in maze (dict)
    ------------------------------------------------------
    """
    my_widgets = {}
    maze = read_maze(maze)
    for i in range(len(maze)):
        for j in range(len(maze[0])):
            if maze[i][j] == '%':   color , Image = 'black', ''
            elif maze[i][j] == 'P':   color , Image = 'blue', "";
            elif maze[i][j] == '.':   color, Image = 'red', ''
            else: color = 'white'
            b1 = Label(frame, text="", height=1, width=1, bg=color, image=Image, padx=0 , pady=0)
            my_widgets[(i, j)] = b1
            b1.grid(row=i, column=j)
    return my_widgets


def dfs(maze, my_widgets, frame):
    """
    -------------------------------------------------------
    Displays Path generated by the Depth First Search Algorithm
    Displays Count and Expanded nodes
    Change color of path to red, start to green and Pacman is still blue
    Use: dfs(maze, my_widgets, frame)
    -------------------------------------------------------
    Parameters:
        maze - name of maze file (str)
        my_widgets - All labels in maze (dict)
        frame - displays the stats of the algorithm (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    path, count, expanded1, start = for_gui(maze, "dfs")
    Label(frame, text="Algorithm: DFS\nPath Cost = " + str(count) + "\nExpanded Nodes = " + str(expanded1)).grid(row=8, column=0)
    my_widgets[tuple(start)].configure(bg="green")
    for  i in path[:-1]:
        i = tuple(i)
        my_widgets[i].configure(bg="red")
    i = tuple(path[-1])
    my_widgets[i].configure(bg="blue")
    return None


def bfs(maze, my_widgets, frame):
    """
    -------------------------------------------------------
    Displays Path generated by the Breadth First Search Algorithm
    Displays Count and Expanded nodes
    Change color of path to red, start to green and Pacman is still blue
    Use: bfs(maze, my_widgets, frame)
    -------------------------------------------------------
    Parameters:
        maze - name of maze file (str)
        my_widgets - All labels in maze (dict)
        frame - displays the stats of the algorithm (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    path, count, expanded1, start = for_gui(maze, "bfs")
    my_widgets[tuple(start)].configure(bg="green")
    Label(frame, text="Algorithm: BFS\nPath Cost = " + str(count) + "\nExpanded Nodes = " + str(expanded1)).grid(row=8, column=0)
    for  i in path[:-1]:
        i = tuple(i)
        my_widgets[i].configure(bg="red")
    i = tuple(path[-1])
    my_widgets[i].configure(bg="blue")


def a_star(maze, my_widgets, frame):
    """
    -------------------------------------------------------
    Displays Path generated by the A* Search Algorithm
    Displays Count and Expanded nodes
    Change color of path to red, start to green and Pacman is still blue
    Use: a_star(maze, my_widgets, frame)
    -------------------------------------------------------
    Parameters:
        maze - name of maze file (str)
        my_widgets - All labels in maze (dict)
        frame - displays the stats of the algorithm (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    path, count, expanded1, start = for_gui(maze, "a_star")
    my_widgets[tuple(start)].configure(bg="green")
    Label(frame, text="Algorithm: A*\nPath Cost = " + str(count) + "\nExpanded Nodes = " + str(expanded1)).grid(row=8, column=0)
    for  i in path[:-1]:
        i = tuple(i)
        my_widgets[i].configure(bg="red")
    i = tuple(path[-1])
    my_widgets[i].configure(bg="blue")

        
def gbs(maze, my_widgets, frame):
    """
    -------------------------------------------------------
    Displays Path generated by the Greedy Best Search Algorithm
    Displays Count and Expanded nodes
    Change color of path to red, start to green and Pacman is still blue
    Use: gbs(maze, my_widgets, frame)
    -------------------------------------------------------
    Parameters:
        maze - name of maze file (str)
        my_widgets - All labels in maze (dict)
        frame - displays the stats of the algorithm (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    path, count, expanded1, start = for_gui(maze, "gbs")
    my_widgets[tuple(start)].configure(bg="green")
    Label(frame, text="Algorithm: GBS\nPath Cost = " + str(count) + "\nExpanded Nodes = " + str(expanded1)).grid(row=8, column=0)
    for  i in path[:-1]:
        i = tuple(i)
        my_widgets[i].configure(bg="red")
    i = tuple(path[-1])
    my_widgets[i].configure(bg="blue")


def alg(frame, maze, my_widgets):
    """
    -------------------------------------------------------
    Displays buttons to select an algorithm
    Sends parameters to selected function
    Use: alg(frame, "mediumMaze.txt", my_widgets)
    -------------------------------------------------------
    Parameters:
        maze - name of maze file (str)
        my_widgets - All labels in maze (dict)
        frame - To place Buttons and label (Tkinter frame)
    Returns:
        None
    ------------------------------------------------------
    """
    Label(frame, text='Choose an algorithm:').grid(row=4, column=0)
    Button(frame, text='DFS' , command=lambda: dfs(maze, my_widgets, frame)).grid(row=4, column=1)
    Button(frame, text='BFS', command=lambda:bfs(maze, my_widgets, frame)).grid(row=5, column=1)
    Button(frame, text='GBS', command=lambda:gbs(maze, my_widgets, frame)).grid(row=6, column=1)
    Button(frame, text='A* ', command=lambda:a_star(maze, my_widgets, frame)).grid(row=7, column=1)
    return
    
    
def med(maze_frame, frame):
    """
    -------------------------------------------------------
    Create the medium maze and displays it
    Use: med(maze_frame, frame)
    -------------------------------------------------------
    Parameters:
        frame - To place Buttons and label (Tkinter frame)
        maze_frame - frame for showing the maze (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    for widget in maze_frame.winfo_children():widget.destroy()
    my_widgets = make_maze(maze_frame, "mediumMaze.txt")
    alg(frame, "mediumMaze.txt", my_widgets)
    return 


def lar(maze_frame, frame):
    """
    -------------------------------------------------------
    Create the Large maze and displays it
    Use: med(maze_frame, frame)
    -------------------------------------------------------
    Parameters:
        frame - To place Buttons and label (Tkinter frame)
        maze_frame - frame for showing the maze (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    for widget in maze_frame.winfo_children():widget.destroy()
    my_widgets = make_maze(maze_frame, "large_maze.txt")
    alg(frame, "large_maze.txt", my_widgets)
    return


def clear(maze_frame, frame):   
    """
    -------------------------------------------------------
    Empties and destroys the labels and buttons for showing the maze 
    and algorithm.
    Resets to start
    Use: clear(maze_frame, frame)
    -------------------------------------------------------
    Parameters:
        frame - To place Buttons and label (Tkinter frame)
        maze_frame - frame for showing the maze (Tkinter frame)
    Returns:
         None
    ------------------------------------------------------
    """
    for widget in maze_frame.winfo_children():
        widget.destroy()
    for i in frame.grid_slaves(row=8, column=0): i.destroy()
    for i in frame.grid_slaves(row=4, column=0):i.destroy()
    for i in frame.grid_slaves(row=4, column=1):i.destroy()
    for i in frame.grid_slaves(row=5, column=1):i.destroy()
    for i in frame.grid_slaves(row=6, column=1):i.destroy()
    for i in frame.grid_slaves(row=7, column=1): i.destroy()
    return

# Create window
window = Tk()
window.title("Pac-man")

# Frame for storing labels and buttons
frame = Frame(window)
frame.pack(side=LEFT)

# Frame for the maze
maze_frame = Frame(window)
maze_frame.pack(side=RIGHT)

Label(frame, text='Choose a maze').grid(row=0, column=0)
Button(frame, text='Medium maze', command=lambda: med(maze_frame, frame)).grid(row=0, column=1)
Button(frame, text='Large  maze', command=lambda:lar(maze_frame, frame)).grid(row=1, column=1)
Button(frame, text='Clear', command=lambda:clear(maze_frame, frame)).grid(row=2, column=1)
my_widgets = {}
window.mainloop()
